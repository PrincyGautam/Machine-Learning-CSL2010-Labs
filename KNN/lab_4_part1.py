# -*- coding: utf-8 -*-
"""Lab 4(1).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RVXweDCInvtCSH3gvJtoxVIsH6biLySC
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
# %matplotlib inline
df = pd.read_csv("/content/diabetes (1).csv")
df.head()

df.info()

from sklearn.preprocessing import StandardScaler
sc_X = StandardScaler()
df1 = df.drop(["Outcome"],axis = 1)
X =  pd.DataFrame(sc_X.fit_transform(df1),columns=['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin','BMI', 'DiabetesPedigreeFunction', 'Age'])
Y = df.Outcome
X.head()

#2
for i in df1.columns:
  plt.scatter(df1[i],df['Outcome'])
  plt.xlabel(i)
  plt.ylabel("Outcome")
  plt.show()

#3
import math
P=[i for i in df['Glucose']]
Q=[j for j in df['Insulin']]
dot_product= 0
mag_P=0
mag_Q=0

for i in range(len(P)):
  for j in range(len(Q)):
    if i==j:
      dot_product += P[i] * Q[i]
for i in P:
  mag_P += i*i
for j in Q:
  mag_Q += j*j 
mag_P = math.sqrt(mag_P)
mag_Q = math.sqrt(mag_Q)
similarity = dot_product/((mag_P)*(mag_Q))
similarity

#3
#split
from sklearn.model_selection import train_test_split
train_ratio = 0.70
validation_ratio = 0.15
test_ratio = 0.15

x_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=1 - train_ratio)
x_val, x_test, y_val, y_test = train_test_split(x_test, y_test, test_size=test_ratio/(test_ratio + validation_ratio)) 

print("Train:", x_train.shape[0])
print("Val:", x_val.shape[0])
print("Test:", x_test.shape[0])

#4
from sklearn.neighbors import KNeighborsClassifier
knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(x_train,y_train)

y_pred = knn.predict(x_test)
y_pred

from sklearn import metrics
from sklearn.metrics import confusion_matrix  
cnf_mat= confusion_matrix(y_test, y_pred)  
print("Accuracy = ", metrics.accuracy_score(y_test,y_pred))
print("Confusion matix:",cnf_mat)