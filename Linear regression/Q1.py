# -*- coding: utf-8 -*-
"""Q1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PWVQWnYrHTcak3UdVgEJbNwiEkxx2mQl
"""

# Commented out IPython magic to ensure Python compatibility.
#A
# %matplotlib inline
import seaborn as sns; sns.set()
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt 
df = pd.read_csv("/content/linear_regression_dataset.csv")

x = df["Height "].tolist()
y = df["Weight"].tolist()
plt.xlabel("Height")
plt.ylabel("Weight")
plt.scatter(x, y)

#B (1) & (2)
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split


X_train, X_test, y_train, y_test = train_test_split(df.drop('Weight',axis='columns'),df.Weight, test_size=0.2, random_state=0)
model = LinearRegression()
model.fit(X_train, y_train)
y_pred=model.predict(X_test)
plt.xlabel("Height")
plt.ylabel("Weight")
plt.plot(X_test,y_pred, color = 'red')
plt.show()
print("Model slope:", model.coef_)
print("Model intercept:",model.intercept_)

#B(3)
 #Estimate Mean and Variance

# Calculate the mean value of a list of numbers
def mean(values):
	return sum(values) / float(len(values))

# Calculate the variance of a list of numbers
def variance(values, mean):
	return sum([(x-mean)**2 for x in values])

# Calculate covariance between x and y
def covariance(x, mean_x, y, mean_y):
	covar = 0.0
	for i in range(len(x)):
		covar += (x[i] - mean_x) * (y[i] - mean_y)
	return covar
 
x = np.array(df.iloc[:,0])
y = np.array(df.iloc[:,1])
 

mean_x, mean_y = mean(x), mean(y)
var_x, var_y = variance(x, mean_x), variance(y, mean_y)

print('x stats: mean=%.3f variance=%.3f' % (mean_x, var_x))
print('y stats: mean=%.3f variance=%.3f' % (mean_y, var_y))
covar = covariance(x, mean_x, y, mean_y)
print('Covariance:', (covar))

def coefficients(df):
  x = df["Height "].tolist()
  y = df["Weight"].tolist()
  b1 = covariance(x, mean_x, y, mean_y)/variance(x,mean_x)
  b0 = mean_y - b1 * mean_x
  return [b0, b1]
 
# calculate coefficients

b0, b1 = coefficients(df)
print('Coefficients: B0=%.3f, B1=%.3f' % (b0, b1))

#plotting values 
x_max = np.max(x) + 100
x_min = np.min(x) - 100
#calculating line values of x and y
X_test = np.linspace(x_min, x_max, 1000)
Y = b0 + b1 * x
#plotting line 
plt.plot(x, Y, color='red', label='Linear Regression')
#plot the data point
plt.scatter(x, y, color='black', label='Scatter')
# x-axis label
plt.xlabel('X_test')
#y-axis label
plt.ylabel('y_pred')
plt.legend()
plt.show()

#B(4)
import matplotlib.pyplot as plt
#(3) plot
plt.scatter(x, Y, color='black')
#(1) plot
plt.scatter(x, y)
plt.show()