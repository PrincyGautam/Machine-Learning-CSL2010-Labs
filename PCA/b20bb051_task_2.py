# -*- coding: utf-8 -*-
"""B20BB051_Task 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12FaH0iYsjadfIl_YAk1T7RL5vVVBVUBL
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

import tensorflow as tf
(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()

x_train.shape = 60000, 28, 28 
x_train_2d = x_train.reshape((60000,28*28))

x_meaned = x_train_2d - np.mean(x_train_2d, axis=0)
cov_mat = np.cov(x_meaned , rowvar = False)
eigen_values , eigen_vectors = np.linalg.eigh(cov_mat)

def PCA(x_train_2d , num_components):
     
    x_meaned = x_train_2d - np.mean(x_train_2d, axis=0)
     
    cov_mat = np.cov(x_meaned , rowvar = False)
    print('Shape of covariance matrix is',cov_mat.shape)
    print('Covariance matrix =\n',cov_mat)
    print('\n')
     
    eigen_values , eigen_vectors = np.linalg.eigh(cov_mat)

     
    sorted_index = np.argsort(eigen_values)[::-1]
    sorted_eigenvalue = eigen_values[sorted_index]
    sorted_eigenvectors = eigen_vectors[:,sorted_index]
    for i in range(5):
      print('Eigen value',i,'is',sorted_eigenvalue[i])
    print('\n')
     
    eigenvector_subset = sorted_eigenvectors[:,0:num_components]
     
    x_reduced = np.dot(eigenvector_subset.transpose() , x_meaned.transpose() ).transpose()
    print('Shape of the data which is reduced now is',x_reduced.shape)
    print('\n')
    return x_reduced
    
PCA(x_train_2d, 50)

mat_red = PCA(x_train_2d, 10)
principal = pd.DataFrame(mat_red, columns = ['PC1','PC2', 'PC3', 'PC4', 'PC5', 'PC6', 'PC7', 'PC8', 'PC9', 'PC10'])
principal = pd.concat([principal, pd.DataFrame(y_train)], axis=1)
import seaborn as sn
plt.figure(figsize = (10,7))
sn.scatterplot(data=principal, s=60, palette='icefire')

#in this code I am getting reconstructed image for all images in x_train. On indexing we are getting error which I am not able to solve. 
#Because of this; not able to compare with the original images.
def reconstruct_data(score, eigen_vectors, x_meaned, K):
  """
  Reconstruct the data based on the top K components.
  Args:
    score (numpy array of floats)    : Score matrix
    eigen_vectors (numpy array of floats) : Matrix of eigenvectors
    X_mean (numpy array of floats)   : Vector corresponding to data mean
    K (scalar)                       : Number of components to include
  Returns:
    (numpy array of floats)          : Matrix of reconstructed data
  """

  X_reconstructed =  np.matmul(score[:, :K], eigen_vectors[:, :K].T) + x_meaned
  return X_reconstructed

num_comp= [10,50,100,300,700]
for K in num_comp:
  X_reconstructed = reconstruct_data(x_train_2d, eigen_vectors, x_meaned, K)
  plt.figure(figsize=(10,7))
  plt.ylim(0,700)
  plt.xlim(0,700)
  plt.imshow(X_reconstructed, cmap='viridis')

from sklearn.metrics import r2_score
from sklearn.metrics import mean_squared_error
from math import sqrt

r2 = r2_score(x_train_2d, X_reconstructed)
rmse = sqrt(mean_squared_error(x_train_2d, X_reconstructed))

print('reconstruction error: ',rmse)